import gradio as gr
import requests
import logging
import threading
import time
from langchain_ollama import ChatOllama
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import (
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
    AIMessagePromptTemplate,
    ChatPromptTemplate,
    MessagesPlaceholder
)
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# URL Ollama API
OLLAMA_API = "http://ollama:11434"

# –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
stop_flag = threading.Event()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
def test_ollama_connection(retries=3, delay=3):
    for i in range(retries):
        try:
            response = requests.get(f"{OLLAMA_API}/api/tags", timeout=5)
            response.raise_for_status()
            logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama")
            return True
        except requests.exceptions.RequestException as e:
            logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({i+1}/{retries}): {e}")
            time.sleep(delay)
    logging.error("üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    return False

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
test_ollama_connection()

if not test_ollama_connection():
    exit(1)  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ LLM
def get_llm_engine(model_name):
    try:
        return ChatOllama(
            model=model_name,
            base_url=OLLAMA_API,
            temperature=0.3
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
SYSTEM_TEMPLATE = """You are an expert AI coding assistant. Provide concise, correct solutions 
with strategic print statements for debugging. Always respond in English."""

chat_prompt = ChatPromptTemplate.from_messages([
    SystemMessagePromptTemplate.from_template(SYSTEM_TEMPLATE),
    MessagesPlaceholder(variable_name="chat_history"),
    HumanMessagePromptTemplate.from_template("{input}")
])
class ChatBot:
    def __init__(self):
        self.chat_history = [AIMessage(content="Hi! I'm DeepSeek. How can I help you code today? üíª")]

    def generate_ai_response(self, user_input, llm_engine):
        stop_flag.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

        if stop_flag.is_set():
            logging.warning("‚õî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return "‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

        logging.info(f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_input}")
        self.chat_history.append(HumanMessage(content=user_input))

        response = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç."  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        def generate():
            nonlocal response
            if stop_flag.is_set():
                return
            try:
                response = chat_prompt | llm_engine | StrOutputParser()
                response = response.invoke({"input": user_input, "chat_history": self.chat_history}) or "‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç."
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."

        thread = threading.Thread(target=generate)
        thread.start()
        thread.join(timeout=10)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

        if thread.is_alive():  # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            logging.warning("‚è≥ –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –∑–∞—Ç—è–Ω—É–ª—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º...")
            stop_flag.set()
            response = "‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)"

        self.chat_history.append(AIMessage(content=response))
        logging.info(f"üí° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {response}")

        return response


    def chat(self, message, model_choice, history):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ –≤ Gradio"""
        if not message:
            return "", history

        logging.debug(f"üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        logging.debug(f"üîÑ –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {model_choice}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM-–¥–≤–∏–∂–∫–∞
        llm_engine = get_llm_engine(model_choice)
        logging.debug("‚úÖ LLM-–¥–≤–∏–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        ai_response = self.generate_ai_response(message, llm_engine)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history.append((message, ai_response))

        return "", history # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞

    def stop_generation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        logging.warning("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        stop_flag.set()
        return "‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", []

    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
        logging.info("üóë –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
        self.chat_history = [
            AIMessage(content="Hi! I'm DeepSeek. How can I help you code today? üíª")
        ]
        return "", []


def create_demo():
    chatbot = ChatBot()
    
    with gr.Blocks(theme=gr.themes.Soft(primary_hue="blue", neutral_hue="zinc")) as demo:
        gr.Markdown("# üß† DeepSeek Code Companion")
        gr.Markdown("üöÄ Your AI Pair Programmer with Debugging Superpowers")
            
        with gr.Row():
            with gr.Column(scale=4):
                chatbot_component = gr.Chatbot(
                    value=[],
                    show_copy_button=True,
                    height=500, 
                    type="messages")
                
                msg = gr.Textbox(
                    placeholder="Type your coding question here...",
                    show_label=False
                )
                
                with gr.Row():
                    stop_btn = gr.Button("‚õî Stop")
                    clear_btn = gr.Button("üóë Clear")
                
            with gr.Column(scale=1):
                model_dropdown = gr.Dropdown(
                    choices=["deepseek-r1:1.5b", "deepseek-r1:7b", "deepseek-r1:14b"],
                    value="deepseek-r1:1.5b",
                    label="Choose Model"
                )
                gr.Markdown("### Model Capabilities")
                gr.Markdown("""
                - üêç Python Expert
                - üêû Debugging Assistant
                - üìù Code Documentation
                - üí° Solution Design
                """)
                
                gr.Markdown("Built with [Ollama](https://ollama.ai/) | [LangChain](https://python.langchain.com/)")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
        msg.submit(
            fn=chatbot.chat,
            inputs=[msg, model_dropdown, chatbot_component],
            outputs=[msg, chatbot_component]
        )

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        stop_btn.click(fn=chatbot.stop_generation, inputs=[], outputs=[msg])

        # –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
        clear_btn.click(fn=chatbot.clear_chat, inputs=[], outputs=[msg, chatbot_component])

    return demo


if __name__ == "__main__":
    demo = create_demo()
    demo.launch(server_name="0.0.0.0", server_port=7860)